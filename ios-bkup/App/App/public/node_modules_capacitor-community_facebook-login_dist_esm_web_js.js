"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-community_facebook-login_dist_esm_web_js"],{

/***/ 44214:
/*!**************************************************************************!*\
  !*** ./node_modules/@capacitor-community/facebook-login/dist/esm/web.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FacebookLoginWeb": () => (/* binding */ FacebookLoginWeb)
/* harmony export */ });
/* harmony import */ var _Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 80071);


class FacebookLoginWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super({
      name: 'FacebookLogin',
      platforms: ['web']
    });
  }
  initialize(options) {
    const defaultOptions = {
      version: 'v10.0'
    };
    return new Promise((resolve, reject) => {
      try {
        return this.loadScript(options.locale).then(() => {
          FB.init(Object.assign(Object.assign({}, defaultOptions), options));
          resolve();
        });
      } catch (err) {
        reject(err);
      }
    });
  }
  loadScript(locale) {
    if (typeof document === 'undefined') {
      return Promise.resolve();
    }
    const scriptId = 'fb';
    const scriptEl = document === null || document === void 0 ? void 0 : document.getElementById(scriptId);
    if (scriptEl) {
      return Promise.resolve();
    }
    const head = document.getElementsByTagName('head')[0];
    const script = document.createElement('script');
    return new Promise(resolve => {
      script.defer = true;
      script.async = true;
      script.id = scriptId;
      script.onload = () => {
        resolve();
      };
      script.src = `https://connect.facebook.net/${locale !== null && locale !== void 0 ? locale : 'en_US'}/sdk.js`;
      head.appendChild(script);
    });
  }
  login(options) {
    return (0,_Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      console.log('FacebookLoginWeb.login', options);
      return new Promise((resolve, reject) => {
        FB.login(response => {
          console.debug('FB.login', response);
          if (response.status === 'connected') {
            resolve({
              accessToken: {
                token: response.authResponse.accessToken
              }
            });
          } else {
            reject({
              accessToken: {
                token: null
              }
            });
          }
        }, {
          scope: options.permissions.join(',')
        });
      });
    })();
  }
  logout() {
    return (0,_Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise(resolve => {
        FB.logout(() => resolve());
      });
    })();
  }
  reauthorize() {
    return (0,_Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise(resolve => {
        FB.reauthorize(it => resolve(it));
      });
    })();
  }
  getCurrentAccessToken() {
    return (0,_Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise((resolve, reject) => {
        FB.getLoginStatus(response => {
          if (response.status === 'connected') {
            const result = {
              accessToken: {
                applicationId: undefined,
                declinedPermissions: [],
                expires: undefined,
                isExpired: undefined,
                lastRefresh: undefined,
                permissions: [],
                token: response.authResponse.accessToken,
                userId: response.authResponse.userID
              }
            };
            resolve(result);
          } else {
            reject({
              accessToken: {
                token: null
              }
            });
          }
        });
      });
    })();
  }
  getProfile(options) {
    return (0,_Users_onlymac_Documents_Bubble_App_BubbleApp_Mobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const fields = options.fields.join(',');
      return new Promise((resolve, reject) => {
        FB.api('/me', {
          fields
        }, response => {
          if (response.error) {
            reject(response.error.message);
            return;
          }
          resolve(response);
        });
      });
    })();
  }
}

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_facebook-login_dist_esm_web_js.js.map