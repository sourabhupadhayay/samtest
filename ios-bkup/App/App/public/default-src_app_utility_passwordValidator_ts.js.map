{"version":3,"file":"default-src_app_utility_passwordValidator_ts.js","mappings":"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","sources":["./src/app/utility/passwordValidator.ts","./node_modules/password-validator/src/constants.js","./node_modules/password-validator/src/index.js","./node_modules/password-validator/src/lib.js","./node_modules/password-validator/src/validationMessages.js"],"sourcesContent":["import * as PasswordValidator from \"password-validator\";\n\nexport class PasswordStrength {\n  private passwordStrength = new PasswordValidator();\n\n  private specialRegex: RegExp = new RegExp(\n    \"(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|])\"\n  );\n\n  constructor() {\n    this.passwordProperty();\n  }\n\n  private passwordProperty() {\n    this.passwordStrength\n      .is()\n      .min(8)\n\n      .has()\n      .uppercase()\n      .has()\n      .lowercase()\n      .has()\n      .digits(1)\n      .has()\n      .symbols();\n  }\n\n  public validatePassword(password: string) {\n    let validation = this.passwordStrength.validate(password, {\n      list: true,\n    }) as string[];\n\n    let failedValidation = {\n      min: false,\n      digits: false,\n      symbols: false,\n      uppercase: false,\n      lowercase: false,\n    };\n\n    for (let index = 0; index < validation.length; index++) {\n      failedValidation[validation[index]] = true;\n    }\n\n    return failedValidation;\n  }\n\n  public isPasswordStrong(password: string) {\n    return this.passwordStrength.validate(password);\n  }\n}\n\nexport interface failedValidation {\n  min: boolean;\n  digits: boolean;\n  symbols: boolean;\n  uppercase: boolean;\n  lowercase: boolean;\n}\n","module.exports = {\n  error: {\n    length: 'Length should be a valid positive number',\n    password: 'Password should be a valid string',\n    invalidPlugin: 'Plugin should be a valid function',\n  },\n  regex: {\n    digits: '(\\\\d.*)',\n    letters: '([a-zA-Z].*)',\n    symbols: '([`~\\\\!@#\\\\$%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-_\\\\=\\\\+\\\\[\\\\\\{\\\\}\\\\]\\\\\\\\\\|;:\\\\\\'\",<.>\\\\/\\\\?€£¥₹§±].*)',\n    spaces: '([\\\\s].*)'\n  }\n};\n","/* eslint-disable no-unused-vars */\nvar lib = require('./lib');\nvar error = require('./constants').error;\nvar getValidationMessage = require('./validationMessages');\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  const len = Number(num);\n  if (isNaN(len) || !Number.isInteger(len) || len < 1) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @returns {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} method - Property name\n * @param {array} arguments - arguments for the func property\n * @returns {PasswordValidator}\n */\nfunction _register(method, args, description) {\n  // Add property to the schema\n  this.properties.push({ method, arguments: args, description });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to validate\n   * @param {object} [options] - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @param {boolean} [options.details] - asks for more details about\n   *           failed validations including arguments, and error messages\n   * @returns {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list' or\n   *           'options.details' is not set. Otherwise, it returns an\n   *           array of property names which failed validations\n   */\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.details = Boolean(options && options.details);\n    this.password = String(pwd);\n\n    this.positive = true;\n\n    if (this.list || this.details) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          var detail = property.method;\n          // If the details option was provided,\n          // return a rich object including validation message\n          if (this.details) {\n            detail = { validation: property.method };\n            if (property.arguments && property.arguments[0]) {\n              detail.arguments = property.arguments[0];\n            }\n\n            if (!this.positive && property.method !== 'not') {\n              detail.inverted = true;\n            }\n            var description = property.arguments && property.arguments[1];\n            var validationMessage = description || getValidationMessage(property.method, detail.arguments, detail.inverted);\n            detail.message = validationMessage;\n          }\n\n          return errorList.concat(detail);\n        }\n        return errorList;\n      }, []);\n    }\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n\n  /**\n   * Rule to mandate the presence of letters in the password\n   *\n   * @param {number} [count] - minimum number of letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  letters(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'letters', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of digits in the password\n   *\n   * @param {number} [count] - minimum number of digits required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  digits(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'digits', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of symbols in the password\n   *\n   * @param {number} [count] - minimum number of symbols required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  symbols(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'symbols', arguments);\n  }\n\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  min(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'min', arguments);\n  }\n\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  max(num, description) {\n    _validateLength(num);\n    return _register.call(this, 'max', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   *\n   * @param {number} [count] - minimum number of lowercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  lowercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'lowercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   *\n   * @param {number} [count] - minimum number of uppercase letters required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  uppercase(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'uppercase', arguments);\n  }\n\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   *\n   * @param {number} [count] - minimum number of spaces required\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  spaces(count, description) {\n    count && _validateLength(count);\n    return _register.call(this, 'spaces', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   *\n   * @param {string|RegExp} [pattern] - pattern to match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  has(pattern, description) {\n    return _register.call(this, 'has', arguments);\n  }\n\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   *\n   * @param {string|RegExp} [pattern] - pattern to not match\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  not(pattern, description) {\n    return _register.call(this, 'not', arguments);\n  }\n\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   *\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  oneOf(list, description) {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n  /**\n   * Insert a plugin function into the validation chain\n   *\n   * @param {Plugin} fn  - A plugin function\n   * @param {string} [description] - description of the validation\n   * @returns {PasswordValidator} instance of PasswordValidator schema\n   */\n  usingPlugin(fn, description) {\n    if (typeof fn !== 'function') {\n      throw new Error(error.invalidPlugin);\n    }\n    return _register.call(this, 'usingPlugin', arguments);\n  }\n}\n\nmodule.exports = PasswordValidator;\n\n/**\n * @callback Plugin\n * @param password Password injected by the library\n */\n","/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp, repeat) {\n  if (repeat && repeat > 1) {\n    const parsedRepeat = parseInt(repeat, 10);\n    return new RegExp(regexp + '{' + parsedRepeat + ',}').test(this.password) === this.positive;\n  }\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   *\n   * @param {number} repeat - count of required digits\n   */\n  digits: function digits(repeat) {\n    return _process.call(this, regex.digits, repeat);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   *\n   * @param {number} repeat - count of required letters\n   */\n  letters: function letters(repeat) {\n    return _process.call(this, regex.letters, repeat);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   *\n   * @param {number} repeat - count of required uppercase letters\n   */\n  uppercase: function uppercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let upperCaseLetters = 0;\n\n      while ((upperCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toLowerCase()) {\n          upperCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (upperCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   *\n   * @param {number} repeat - count of required lowercase letters\n   */\n  lowercase: function lowercase(repeat) {\n    if (repeat && repeat > 1) {\n      let characterIndex = 0;\n      let lowerCaseLetters = 0;\n\n      while ((lowerCaseLetters < repeat) && (characterIndex < this.password.length)) {\n        const currentLetter = this.password.charAt(characterIndex);\n        if (currentLetter !== currentLetter.toUpperCase()) {\n          lowerCaseLetters++;\n        }\n        characterIndex++;\n      }\n\n      return (lowerCaseLetters === repeat) === this.positive;\n    }\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   *\n   * @param {number} repeat - count of required symbols\n   */\n  symbols: function symbols(repeat) {\n    return _process.call(this, regex.symbols, repeat);\n  },\n\n  /**\n   * Method to validate the presence of space\n   *\n   * @param {number} repeat - count of required spaces\n   */\n  spaces: function spaces(repeat) {\n    return _process.call(this, regex.spaces, repeat);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  },\n\n  /**\n   * Method to run a plugin function for password\n   *\n   * @param {function} plugin - A plugin function\n   */\n  usingPlugin: function usingPlugin(fn) {\n    try {\n      const result = fn.call({}, this.password);\n      return Boolean(result) === this.positive;\n    } catch (err) {\n      return false;\n    }\n  }\n};\n\n","module.exports = function (method, arg, inverted) {\n  const msgList = inverted ? negativeMessages : positiveMessages;\n  return msgList[method] && msgList[method](arg);\n};\n\nconst positiveMessages = {\n  min: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  letters: (num = 1) => `The string should have a minimum of ${num} letter${pluralify(num)}`,\n  digits: (num = 1) => `The string should have a minimum of ${num} digit${pluralify(num)}`,\n  uppercase: (num = 1) => `The string should have a minimum of ${num} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 1) => `The string should have a minimum of ${num} lowercase letter${pluralify(num)}`,\n  symbols: (num = 1) => `The string should have a minimum of ${num} symbol${pluralify(num)}`,\n  spaces: (num = 1) => `The string should have a minimum of ${num} space${pluralify(num)}`,\n  oneOf: (list) => `The string should be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should have pattern '${pattern}'`,\n  not: (pattern) => `The string should not have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should not violate ${fn.name || 'plugin'}`,\n};\n\nconst negativeMessages = {\n  min: (num) => `The string should have a maximum length of ${num} character${pluralify(num)}`,\n  max: (num) => `The string should have a minimum length of ${num} character${pluralify(num)}`,\n  letters: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} letter${pluralify(num)}`,\n  digits: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} digit${pluralify(num)}`,\n  uppercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} uppercase letter${pluralify(num)}`,\n  lowercase: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} lowercase letter${pluralify(num)}`,\n  symbols: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} symbol${pluralify(num)}`,\n  spaces: (num = 0) => `The string should ${num === 0 ? 'not have' : `have a maximum of ${num}`} space${pluralify(num)}`,\n  oneOf: (list) => `The string should not be ${list.length > 1 ? `one of ${list.slice(0, -1).join(', ')} and ` : ''}${list[list.length - 1]}`,\n  has: (pattern) => `The string should not have pattern '${pattern}'`,\n  not: (pattern) => `The string should have pattern '${pattern}'`,\n  usingPlugin: (fn) => `The string should violate ${fn.name || 'plugin'}`,\n};\n\nfunction pluralify(num) {\n  return num === 1 ? '' : 's';\n}\n"],"names":["PasswordValidator","PasswordStrength","constructor","RegExp","passwordProperty","passwordStrength","is","min","has","uppercase","lowercase","digits","symbols","validatePassword","password","validation","validate","list","failedValidation","index","length","isPasswordStrong","module","exports","error","invalidPlugin","regex","letters","spaces","lib","require","getValidationMessage","_validateLength","num","len","Number","isNaN","isInteger","Error","_isPasswordValidFor","property","method","apply","arguments","_register","args","description","properties","push","pwd","options","Boolean","details","String","positive","reduce","errorList","call","detail","inverted","validationMessage","message","concat","every","bind","count","max","pattern","not","oneOf","usingPlugin","fn","_process","regexp","repeat","parsedRepeat","parseInt","test","symbol","characterIndex","upperCaseLetters","currentLetter","charAt","toLowerCase","lowerCaseLetters","toUpperCase","indexOf","result","err","arg","msgList","negativeMessages","positiveMessages","pluralify","slice","join","name"],"sourceRoot":"webpack:///","x_google_ignoreList":[1,2,3,4]}